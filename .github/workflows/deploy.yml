name: Deploy to Vercel & Cloud Run

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main

jobs:
  # 前端部署到 Vercel
  deploy-vercel:
    name: Deploy Frontend to Vercel
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Deploy to Vercel (Production)
        if: github.ref == 'refs/heads/main'
        run: |
          npm install -g vercel
          vercel --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Deploy to Vercel (Preview)
        if: github.ref == 'refs/heads/dev'
        run: |
          npm install -g vercel
          vercel --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  # 后端部署到 Cloud Run
  deploy-cloudrun:
    name: Deploy Backend to Cloud Run
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          export_default_credentials: true

      - name: Configure Docker for GCR
        run: |
          gcloud auth configure-docker gcr.io

      - name: Build Docker image
        run: |
          docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/student-record-api:latest \
                       -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/student-record-api:${{ github.sha }} \
                       -f apps/api/Dockerfile .

      - name: Push to Google Container Registry
        run: |
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/student-record-api:latest
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/student-record-api:${{ github.sha }}

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy student-record-api \
            --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/student-record-api:latest \
            --region us-west1 \
            --platform managed \
            --allow-unauthenticated \
            --memory 512Mi \
            --cpu 1 \
            --max-instances 2 \
            --set-env-vars=NODE_ENV=production,LOG_LEVEL=info

      - name: Verify deployment
        run: |
          sleep 5
          curl -f https://student-record-api-xxxxx.a.run.app/health || exit 1

  # 代码质量检查
  quality:
    name: Code Quality & Type Checking
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.12.2

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type checking
        run: pnpm typecheck

      - name: Linting
        run: pnpm lint

      - name: Format check
        run: pnpm format:check

  # 安全性检查
  security:
    name: Security Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: '.'
          format: sarif
          output: trivy-results.sarif

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: trivy-results.sarif
