rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is super admin
    function isSuperAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }
    
    // Helper function to check if user is admin or super admin
    function isAdmin() {
      return isAuthenticated() && 
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin');
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      // Only superadmin can change roles, users can update their own data except role
      allow update: if isOwner(userId) && (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['role']));
      allow update: if isSuperAdmin();
      allow create: if isOwner(userId);
      allow delete: if isSuperAdmin();
    }
    
    // Data collections with userId field
    match /clients/{document} {
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isSuperAdmin());
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow update, delete: if isAuthenticated() && (isOwner(resource.data.userId) || isSuperAdmin());
    }
    
    match /sessions/{document} {
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isSuperAdmin());
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow update, delete: if isAuthenticated() && (isOwner(resource.data.userId) || isSuperAdmin());
    }
    
    match /rates/{document} {
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isSuperAdmin());
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow update, delete: if isAuthenticated() && (isOwner(resource.data.userId) || isSuperAdmin());
    }
    
    match /invoices/{document} {
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isSuperAdmin());
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow update, delete: if isAuthenticated() && (isOwner(resource.data.userId) || isSuperAdmin());
    }
    
    match /knowledgeBase/{document} {
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isSuperAdmin());
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow update, delete: if isAuthenticated() && (isOwner(resource.data.userId) || isSuperAdmin());
    }
    
    match /companyProfile/{userId} {
      allow read, write: if isAuthenticated() && (isOwner(userId) || isSuperAdmin());
    }
    
    // Expenses (personal expense tracking)
    match /expenses/{document} {
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isSuperAdmin());
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow update, delete: if isAuthenticated() && (isOwner(resource.data.userId) || isSuperAdmin());
    }
    
    // Expense Categories
    match /expenseCategories/{document} {
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isSuperAdmin());
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow update, delete: if isAuthenticated() && (isOwner(resource.data.userId) || isSuperAdmin());
    }
    
    // Sharing links (public read when valid)
    match /sharingLinks/{document} {
      allow read: if true;  // Public access for sharing
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow update, delete: if isAuthenticated() && (isOwner(resource.data.userId) || isSuperAdmin());
    }
    
    // Audit logs (super admin only)
    match /auditLogs/{document} {
      allow read: if isSuperAdmin();
      allow write: if false;  // Only server can write
    }
    
    // Counters (server only)
    match /_counters/{document} {
      allow read: if isAuthenticated();
      allow write: if false;  // Only server can write
    }
  }
}
